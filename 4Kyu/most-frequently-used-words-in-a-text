import re
from collections import Counter
def top_3_words(text):
    # find all of the words (a-z letters and apostrophes) of any length (*)
    words = re.findall("([a-z]+'[a-z]*'*[a-z]*|'*[a-z]+)", text.lower())    
    words = [x for x in words if x] # removes empty entries (since findall includes empty matches) (empty strings retun false)
    wordCounts = Counter(words) # utilize counter from collections to generate a dictionary of each word and its occurance number
    return [x[0] for x in wordCounts.most_common(3)] # get the first item of each tuple returned by the most common function
'''
DESCRIPTION:
Write a function that, given a string of text (possibly with punctuation and line-breaks), returns an array of the top-3 most occurring words, in descending order of the number of occurrences.

Assumptions:
A word is a string of letters (A to Z) optionally containing one or more apostrophes (') in ASCII.
Apostrophes can appear at the start, middle or end of a word ('abc, abc', 'abc', ab'c are all valid)
Any other characters (e.g. #, \, / , . ...) are not part of a word and should be treated as whitespace.
Matches should be case-insensitive, and the words in the result should be lowercased.
Ties may be broken arbitrarily.
If a text contains fewer than three unique words, then either the top-2 or top-1 words should be returned, or an empty array if a text contains no words.
'''